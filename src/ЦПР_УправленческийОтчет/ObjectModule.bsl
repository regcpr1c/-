Перем ГраницыПериода Экспорт;
Перем ПоказателиПланирования Экспорт;
Перем АналитикаПланирования Экспорт;

Функция ПолучитьМассивДопустимыхТиповПоВидуАналитики(ВидАналитики) Экспорт
	МассивТипов = Новый Массив;

	Если ВидАналитики = "НаправлениеРазвития" Тогда
		//МассивТипов.Добавить(Тип("СправочникСсылка.bpНаправленияРазвития"));
	ИначеЕсли ВидАналитики = "Организация" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		//МассивТипов.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ИначеЕсли ВидАналитики = "Номенклатура" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		//МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	ИначеЕсли ВидАналитики = "Контрагент" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;

	Возврат МассивТипов;

КонецФункции

Функция ПолучитьДанныеИсточника(Источник, НачалоПериода, КонецПериода)
	НачалоСообщения = "- Ошибка в источнике """ + Источник + """: ";


	Если ПустаяСтрока(Источник.ИмяРегистра) Тогда
		Сообщить(НачалоСообщения + "не заполнено значение реквизита ""Данные""!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Источник.ВиртуальнаяТаблица) Тогда
		Сообщить(НачалоСообщения + "не заполнено значение реквизита ""Таблица""!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(Источник.ИмяРегистра);

	Если ОбъектМД = Неопределено Тогда
		Сообщить(НачалоСообщения + "значение реквизита ""Данные"" заполнено неверно!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;

	Если Источник.ВиртуальнаяТаблица = "ОстаткиИОбороты" Тогда
		ИмяТаблицы = "ОстаткиИОбороты";
		ДополнительныеПараметры = ", ";
	Иначе
		ИмяТаблицы = "Обороты";
		ДополнительныеПараметры = "";
	КонецЕсли;


	Построитель = Новый ПостроительОтчета;

	ТекстЗапроса = "ВЫБРАТЬ
	|
	|	// Измерения регистра
	|	[ИЗМЕРЕНИЯ]
	|
	|	// Ресурсы регистра
	|	[РЕСУРСЫ]
	|
	|ИЗ
	|	" + ОбъектМД.ПолноеИмя() + "." + ИмяТаблицы + "(&НачалоПериода, &КонецПериода, [ПЕРИОДИЧНОСТЬ], " + ДополнительныеПараметры + ") КАК Таблица
	|ГДЕ
	|	[УСЛОВИЕ]";


	ТекстИзмерения = "";
	ТекстРесурсы = "";
	ТекстУсловие = "";
	ПолеЦФО = "";
	НомерПараметра = 1;


	Для каждого Строка Из Источник.Аналитика Цикл


		//Если СписокАналитики <> Неопределено И СписокАналитики.Найти(Строка.ВидАналитики) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;

		Если не ЗначениеЗаполнено(Строка.ИмяИзмеренияЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяАналитики = Строка.ВидАналитики;

		Если ТипЗнч(Строка.ИмяИзмеренияЗначение) = Тип("Строка") Тогда

			Если ПустаяСтрока(Строка.ИмяИзмеренияЗначение) Тогда
				Продолжить;
			КонецЕсли;

			ТекстИзмерения = ?(ТекстИзмерения = "", "", ТекстИзмерения + ",
			|	") + "Таблица." + Строка.ИмяИзмеренияЗначение + " КАК " + ИмяАналитики;

			Если ИмяАналитики = "ЦФО" Тогда
				ПолеЦФО = "Таблица." + Строка.ИмяИзмеренияЗначение;
			КонецЕсли;
		Иначе


			ИмяПараметра = "ПараметрЗначения" + Формат(НомерПараметра, "ЧН=; ЧГ=");
			НомерПараметра = НомерПараметра + 1;

			Построитель.Параметры.Вставить(ИмяПараметра, Строка.ИмяИзмеренияЗначение);

			ТекстИзмерения = ?(ТекстИзмерения = "", "", ТекстИзмерения + ",
			|	") + "&" + ИмяПараметра + " КАК " + ИмяАналитики;

			Если ИмяАналитики = "ЦФО" Тогда
				ПолеЦФО = "&" + ИмяПараметра;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ТекстИзмерения <> "" Тогда
		ТекстИзмерения = ТекстИзмерения + ",";
	КонецЕсли;

	ТекстИзмерения = ТекстИзмерения + "
	//|	&Сценарий КАК Сценарий,
	|	Таблица.Период КАК Период,";


	Для каждого Строка Из Источник.Показатели Цикл


		//Если СписокПоказателей <> Неопределено И СписокПоказателей.Найти(Строка.ВидПоказателя) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;

		Если ПустаяСтрока(Строка.ИмяРесурса) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя = Строка.ВидПоказателя;

		ТекстРесурсы = ?(ТекстРесурсы = "", "", ТекстРесурсы + ",
		|	") + "Таблица." + Строка.ИмяРесурса + " КАК " + ИмяПоказателя;

	КонецЦикла;

	Если ТекстРесурсы = "" Тогда
		//Сообщить(НачалоСообщения + "не определено ни одного показателя!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;


	//Если ЗначениеЗаполнено(ЦФО) Тогда
	//	Если ПолеЦФО = "" Тогда
	//		ТекстУсловие = "ЛОЖЬ";
	//	Иначе
	//		ТекстУсловие = ПолеЦФО + " = &ЦФО";
	//	КонецЕсли;
	//Иначе
		ТекстУсловие = "ИСТИНА";
	//КонецЕсли;



	Если Источник.ДетализироватьПоРегистратору Тогда
		Периодичность = "РЕГИСТРАТОР";
		ТекстИзмерения = ТекстИзмерения + "
		|	Таблица.Регистратор КАК ПервичныйДокумент,";
	//ИначеЕсли ЗначениеЗаполнено(Сценарий.Периодичность) Тогда
	//	Периодичность = ПолучитьИмяЗначенияПеречисления(Сценарий.Периодичность);
	Иначе
		Периодичность ="День";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИЗМЕРЕНИЯ]", ТекстИзмерения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[РЕСУРСЫ]", ТекстРесурсы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УСЛОВИЕ]", ТекстУсловие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПЕРИОДИЧНОСТЬ]", Периодичность);


	Построитель.Параметры.Вставить("НачалоПериода", НачалоПериода);
	Построитель.Параметры.Вставить("КонецПериода", КонецПериода);
	//Построитель.Параметры.Вставить("Сценарий", Сценарий);
	//Построитель.Параметры.Вставить("ЦФО", ЦФО);
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();


	Настройки = Источник.НастройкиПостроителя.Получить();
	Если Настройки <> Неопределено Тогда

		Попытка
			Построитель.УстановитьНастройки(Настройки, Истина, Ложь, Ложь, Ложь, Ложь);
		Исключение
			//Сообщить(НачалоСообщения + "ошибка при установке отбора: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
			Возврат Неопределено;
		КонецПопытки;

	КонецЕсли;



	Попытка
		Запрос = Построитель.ПолучитьЗапрос();
		Таблица = Запрос.Выполнить().Выгрузить();
	Исключение


		Таблица = Неопределено;

		//Сообщить(НачалоСообщения + "ошибка при выполнении запроса: " + ОписаниеОшибки(), СтатусСообщения.Внимание);

	КонецПопытки;

	Возврат Таблица;

КонецФункции

// Отрабатывает расшифровки типового отчета
функция ОбработкаРасшифровкиТиповогоОтчета(Расшифровка, СтандартнаяОбработка, ФормаОтчета, ДополнительныеРасшифровки = Неопределено) Экспорт
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
	   Возврат Неопределено;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	                           
	ЭтоДетальнаяЗапись = ЭтоДетальнаяЗапись(ФормаОтчета.ДанныеРасшифровки, Расшифровка);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки);
	МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , Истина);
	
	ДотупноеПоле = Неопределено;
	Если МассивПолейРасшифровкиСРесурсами.Количество() > 0 тогда
		ДотупноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(МассивПолейРасшифровкиСРесурсами[0].Поле), КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Команда = Неопределено;
	
	Если ЭтоДетальнаяЗапись Тогда
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	Значение = МассивПолейРасшифровкиСРесурсами[0].Значение;
	ПолеРасшифровки = ДотупноеПоле.Поле;
	ЭтоЧисловойРесурс = ДотупноеПоле <> Неопределено И ДотупноеПоле.Ресурс И (ДотупноеПоле.Тип.СодержитТип(Тип("Число")) или ТипЗнч(Значение) = Тип("Число") или Значение = NULL);
	
	Если ЭтоЧисловойРесурс И НЕ ЭтоДетальнаяЗапись тогда
		Команда = "РасшифроватьПоле";
	Иначе
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	//Если ЭтоЧисловойРесурс И ЭтоДетальнаяЗапись тогда
	//	Предупреждение("Поле """ + ДотупноеПоле.Заголовок + """ расшифровать не удалось, так как ");
	//	Возврат;
	//КонецЕсли;
	
	Если Команда = "ОткрытьЗначение" Тогда
		ОткрытьЗначение(МассивПолейРасшифровкиСРесурсами[0].Значение);
	ИначеЕсли Команда = "РасшифроватьПоле" Тогда
		// Для расшифровки создается список значащих полей 
		// 
		// Из списка удаляем все использованные поля
		// Выведем списк расшифровки группировки для выбора пользователя
		// Откроем форму с выбранной расшифровкой
		
		СписокПолейРасшифровки = ПолучитьСписокПолейКомпоновщикаНастроек();
		
		УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки);
		
		
		
		СписокДоступныхРасшифровок = Новый СписокЗначений;
		Для каждого ПолеСпискаРасшифровки из СписокПолейРасшифровки Цикл
			ДостпноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(ПолеСпискаРасшифровки.Значение), КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
			СписокДоступныхРасшифровок.Добавить(ПолеСпискаРасшифровки.Значение, ДостпноеПоле.Заголовок);
		КонецЦикла;
		
		Если ДополнительныеРасшифровки <> Неопределено тогда
			Для каждого ЭлементСписка из ДополнительныеРасшифровки Цикл
				СписокДоступныхРасшифровок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦИкла;
		КонецЕсли;
		
		СписокДоступныхРасшифровок.Добавить("Полный список полей для расшифровки...");
		Если СписокДоступныхРасшифровок.Количество() > 1 тогда
			Поле = ФормаОтчета.ВыбратьИзМеню(СписокДоступныхРасшифровок);
			Если Поле <> Неопределено тогда
				Поле = Поле.Значение;
			Иначе 
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Поле = "Полный список полей для расшифровки...";
		КонецЕсли;
		
		Если Поле = "Полный список полей для расшифровки..." тогда
			// Расшифровать собственным отчетом
			ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
			ФормаВыбораПоля.КомпоновщикНастроек = КомпоновщикНастроек;
			РодителиПоля = Новый Массив;
			ДобавитьРодителей(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка], ФормаОтчета.ДанныеРасшифровки, РодителиПоля);
			ФормаВыбораПоля.РодителиПоля = РодителиПоля;
			Поле = ФормаВыбораПоля.ОткрытьМодально();
			Если Поле = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Поле = Строка(Поле.Поле);
		ИначеЕсли ДополнительныеРасшифровки <> Неопределено и ДополнительныеРасшифровки.НайтиПоЗначению(Поле) <> Неопределено тогда
			// Расшифровать собственным отчетом
			Возврат Поле;

		КонецЕсли;
		
		Если ДополнительныеРасшифровки <> Неопределено тогда
			МассивДляУдаления = Новый Массив;
			Для каждого ЭлементСписка из СписокДоступныхРасшифровок Цикл
				Если ДополнительныеРасшифровки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено тогда
					МассивДляУдаления.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			Для каждого ЭлементСписка из МассивДляУдаления Цикл
				СписокДоступныхРасшифровок.Удалить(ЭлементСписка);
			КонецЦИкла;
		КонецЕсли;
		
		НовыйОтчет = ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла);//Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
		
		ФормаРасшифровки = ПолучитьОбщуюФорму("ФормаРасшифровкиАналитическихОтчетов", , ФормаОтчета);
		
		СписокДоступныхРасшифровок.Удалить(СписокДоступныхРасшифровок.Количество()-1);
		
		//НовыйОтчет.СохраненнаяНастройка         = ОтчетОбъект.СохраненнаяНастройка;
		НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
		НовыйОтчет.ДатаНачала=ДатаНачала;
		НовыйОтчет.ДатаОкончания=ДатаОкончания;
		НовыйОтчет.БюджетныеОперации.Загрузить(БюджетныеОперации.Выгрузить());
//НовыйОтчет.ПрименитьНастройку();
		
		//НовыйОтчет.ЗначенияНастроекПанелиПользователя = Неопределено;
		ФормаРасшифровки.ОтчетОбъект            = НовыйОтчет;
		ФормаРасшифровки.ТекущееПолеРасшифровка = Поле;
		ФормаРасшифровки.ФормаОтчета            = ФормаОтчета;
		ФормаРасшифровки.ДанныеРасшифровки      = ФормаОтчета.ДанныеРасшифровки;
		ФормаРасшифровки.Расшифровка            = Расшифровка;
		ФормаРасшифровки.ПолеРасшифровки        = ПолеРасшифровки;
		ФормаРасшифровки.СписокПолейРасшифровки = СписокДоступныхРасшифровок;
		
		ФормаРасшифровки.Открыть();
		ФормаРасшифровки.ОбновитьФорму();
		
		Возврат Поле; 
	КонецЕсли;
	Возврат Неопределено; 
КонецФункции

Функция ЭтоДетальнаяЗапись(ДанныеРасшифровки, Расшифровка)
	
	ЭтоДетальнаяЗапись = Ложь;
	Элемент = ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Элементы = Элемент.ПолучитьРодителей();
		Если Элементы.Количество() > 0 Тогда
			Элемент = Элементы[0];
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ЭтоДетальнаяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтоДетальнаяЗапись;
	
КонецФункции

// Возвращает массив полей группировок всех группировок компоновщика настроек
Функция ПолучитьМассивПолейГруппировки(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Строки, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Колонки, МассивПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Серии, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Точки, МассивПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
                	МассивПолей.Добавить(ТекущееПолеГруппировки);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Структура, МассивПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПолейКомпоновщикаНастроек() Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	СписокПолейИсключений = Новый СписокЗначений;
	//Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) тогда
	//	НастройкиПанели = ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
	//	Если НастройкиПанели.Свойство("СписокИсключаемыхПолейРасшифровки") тогда
	//		СписокПолейИсключений = НастройкиПанели.СписокИсключаемыхПолейРасшифровки;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьПоля(КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы, СписокПолей, СписокПолейИсключений);
	
	Возврат СписокПолей;
КонецФункции

Процедура ДобавитьПоля(Элементы, СписокПолей, СписокПолейИсключений)   
	
	Для каждого ДоступноеПоле из Элементы Цикл
		Если СписокПолейИсключений.НайтиПоЗначению(Строка(ДоступноеПоле.Поле)) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		Если ДоступноеПоле.Папка тогда
			ДобавитьПоля(ДоступноеПоле.Элементы, СписокПолей, СписокПолейИсключений);
		Иначе
			СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Процедура УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки)
	
	Для каждого ПолеРасшифровки из МассивПолейРасшифровки Цикл
		Поле = Неопределено;
		Если ТипЗНч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			Поле = ПолеРасшифровки.Поле
		ИначеЕсли ТипЗнч(ПолеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
			Поле = ПолеРасшифровки.ЛевоеЗначение;
		КонецЕсли;
		ПолеСписка = СписокПолейРасшифровки.НайтиПоЗначению(Строка(Поле));
		Если ПолеСписка <> Неопределено тогда
			СписокПолейРасшифровки.Удалить(ПолеСписка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска) Экспорт
	
	Возврат ОбластьПоиска.НайтиПоле(Поле);
	
КонецФункции


Процедура ЗаполнитьБюджетныеОперации()
	Для Каждого СтрокаСтатей Из СтатьиОтчета Цикл
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтатьи",СтрокаСтатей.Идентификатор);
		
		СписокИсточников = ИсточникиДанных.НайтиСтроки(СтруктураПоиска);

		// Получение данных по каждому источнику.
		Для Каждого Источник Из СписокИсточников Цикл
			
			// Получение данных по источнику.
			ДанныеИсточника = ПолучитьДанныеИсточника(Источник, ДатаНачала,КонецДня(ДатаОкончания));
			
			Если ДанныеИсточника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Формирование бюджетных операций.
			Если ДанныеИсточника.Количество() = 0 Тогда
				
				//Сообщить("- Данные по источнику """ + Источник + """ не получены.", СтатусСообщения.Обычное);
				
			Иначе
			
				Для Каждого Строка Из ДанныеИсточника Цикл
					
					НоваяСтрока = БюджетныеОперации.Добавить();
					НоваяСтрока.Статья = СтрокаСтатей.Наименование;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					
					НоваяСтрока.Сумма=НоваяСтрока.Сумма*СтрокаСтатей.Знак;
					
				КонецЦикла;
				
				//Сообщить("- Данные по источнику """ + Источник + """ успешно получены.", СтатусСообщения.Обычное);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		
	КонецЦикла;
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	ЗаполнитьБюджетныеОперации();
	
	Настройки=КомпоновщикНастроек.ПолучитьНастройки();
	
	// создадим структуру с внешним набором данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("БюджетныеОперации", БюджетныеОперации.Выгрузить());
	
	//От(СхемаКомпоновкиДанных,Настройки,ВнешниеНаборыДанных);
	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// создадим и инициализируем процессор компоновки данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// очистим результирующий табличный документ
	ДокументРезультат.Очистить();
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
КонецПроцедуры

ГраницыПериода=Новый Массив;
ГраницыПериода.Добавить("НачалоПериода");
ГраницыПериода.Добавить("КонецПериода");

ПоказателиПланирования=Новый Массив;
ПоказателиПланирования.Добавить("Количество");
ПоказателиПланирования.Добавить("Сумма");

АналитикаПланирования=Новый Массив;
//АналитикаПланирования.Добавить("НаправлениеРазвития");
АналитикаПланирования.Добавить("Организация");
АналитикаПланирования.Добавить("Номенклатура");
АналитикаПланирования.Добавить("Контрагент");

ИсточникиДанных.Колонки.Очистить();
ИсточникиДанных.Колонки.Добавить("ИдентификаторСтатьи");
ИсточникиДанных.Колонки.Добавить("Идентификатор");
ИсточникиДанных.Колонки.Добавить("Наименование");
ИсточникиДанных.Колонки.Добавить("ИмяРегистра");
ИсточникиДанных.Колонки.Добавить("НастройкиПостроителя");
ИсточникиДанных.Колонки.Добавить("ТекстЗапроса");
ИсточникиДанных.Колонки.Добавить("ВиртуальнаяТаблица");
ИсточникиДанных.Колонки.Добавить("ДетализироватьПоРегистратору");
ИсточникиДанных.Колонки.Добавить("Коэффициент");
//ИсточникиДанных.Колонки.Добавить("ВидИсточникаДанных");
//ИсточникиДанных.Колонки.Добавить("ПараметрыЗапросаИсточникаДанных");
ИсточникиДанных.Колонки.Добавить("Показатели");
ИсточникиДанных.Колонки.Добавить("Аналитика");
ИсточникиДанных.Колонки.Добавить("ГраницыОтбора");
