
Перем мКодВыбранногоСчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура формирует для указанной подсистемы массив из подсиненных подсистем.
//
Процедура ЗаполнитьПодчиненныеПодсистемы(ПодсистемаРодитель, СписокПодсистем)
	
	Для Каждого Подсистема Из ПодсистемаРодитель.Подсистемы Цикл
		
		СписокПодсистем.Добавить(Подсистема);
		
		ЗаполнитьПодчиненныеПодсистемы(Подсистема, СписокПодсистем);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПодчиненныеПодсистемы()

// Процедура дополняет список значений СписокОбъектов объектами метаданных из коллекции,
// принадлежащих хотя бы одной подсистеме из списка подсистем.
//
Процедура ПолучитьОбъектыПодсистемы(КоллекцияОбъектов, СписокПодсистем, СписокОбъектов)
	
	Для Каждого Подсистема Из СписокПодсистем Цикл
		
		Для Каждого ОбъектМД Из КоллекцияОбъектов Цикл
			
			Если Подсистема.Состав.Содержит(ОбъектМД) И СписокОбъектов.НайтиПоЗначению(ОбъектМД.ПолноеИмя()) = Неопределено Тогда
				СписокОбъектов.Добавить(ОбъектМД.ПолноеИмя(), ?(ПустаяСтрока(ОбъектМД.Синоним), ОбъектМД.Имя, ОбъектМД.Синоним));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОбъектыПодсистемы()

// Процедура формирует дерево регистров в разрезе подсистем верхнего уровня.
//
Процедура СформироватьДеревоРегистров()
	
	СписокДобавленныхОбъектов = Новый Массив;
	
	// Формирование дерева объектов, подчиненных подсистемам.
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		
		// Формирование списка подчиненных подсистем.
		СписокПодсистем = Новый Массив;
		СписокПодсистем.Добавить(Подсистема);
		
		ЗаполнитьПодчиненныеПодсистемы(Подсистема, СписокПодсистем);
		
		// Определение регистров, входящих в подсистему.
		СписокОбъектов = Новый СписокЗначений;
		
		ПолучитьОбъектыПодсистемы(Метаданные.РегистрыНакопления, СписокПодсистем, СписокОбъектов);
		ПолучитьОбъектыПодсистемы(Метаданные.РегистрыБухгалтерии, СписокПодсистем, СписокОбъектов);
		
		Если СписокОбъектов.Количество() > 0 Тогда
			
			СтрокаПодсистемы = Регистры.Строки.Добавить();
			СтрокаПодсистемы.Представление	= Подсистема.Синоним;
			СтрокаПодсистемы.ИндексКартинки	= 0;
			
			Для Каждого ЭлементСписка Из СписокОбъектов Цикл
				
				КлассРегистра = Лев(ЭлементСписка.Значение, Найти(ЭлементСписка.Значение, ".") - 1);
				
				СтрокаОбъекта = СтрокаПодсистемы.Строки.Добавить();
				СтрокаОбъекта.Имя				= ЭлементСписка.Значение;
				СтрокаОбъекта.Представление		= ЭлементСписка.Представление;
				СтрокаОбъекта.ИндексКартинки	= ?(КлассРегистра = "РегистрНакопления", 1, 2);
				
				// Добавление структуры плана счетов регистра бухгалтерии.
				Если КлассРегистра = "РегистрБухгалтерии" Тогда
			
					ДобавитьСтруктуруПланаСчетов(СтрокаОбъекта);
					
				КонецЕсли;
				
				СписокДобавленныхОбъектов.Добавить(ЭлементСписка.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление объектов, подчиненных конфигурации.
	СписокОбъектов = Новый СписокЗначений;
	
	Для Каждого ОбъектМД Из Метаданные.РегистрыНакопления Цикл
		
		Если СписокДобавленныхОбъектов.Найти(ОбъектМД.ПолноеИмя()) = Неопределено Тогда
			СписокОбъектов.Добавить(ОбъектМД.ПолноеИмя(), ?(ПустаяСтрока(ОбъектМД.Синоним), ОбъектМД.Имя, ОбъектМД.Синоним));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОбъектМД Из Метаданные.РегистрыБухгалтерии Цикл
		
		Если СписокДобавленныхОбъектов.Найти(ОбъектМД.ПолноеИмя()) = Неопределено Тогда
			СписокОбъектов.Добавить(ОбъектМД.ПолноеИмя(), ?(ПустаяСтрока(ОбъектМД.Синоним), ОбъектМД.Имя, ОбъектМД.Синоним));
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПодсистемы = Регистры;
		
	Для Каждого ЭлементСписка Из СписокОбъектов Цикл
		
		КлассРегистра = Лев(ЭлементСписка.Значение, Найти(ЭлементСписка.Значение, ".") - 1);
				
		СтрокаОбъекта = СтрокаПодсистемы.Строки.Добавить();
		СтрокаОбъекта.Имя				= ЭлементСписка.Значение;
		СтрокаОбъекта.Представление		= ЭлементСписка.Представление;
		СтрокаОбъекта.ИндексКартинки	= ?(КлассРегистра = "РегистрНакопления", 1, 2);
		
		// Добавление структуры плана счетов регистра бухгалтерии.
		Если КлассРегистра = "РегистрБухгалтерии" Тогда
	
			ДобавитьСтруктуруПланаСчетов(СтрокаОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоРегистров()

// Процедура формирует структуру плана счетов для строки регистра бухгалтерии.
//
Процедура ДобавитьСтруктуруПланаСчетов(СтрокаРодитель)
	
	// Получение объекта метаданных плана счетов.
	ПрефиксИмениСчета = СтрокаРодитель.Имя + "|";
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(СтрокаРодитель.Имя);
	
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланСчетов = ОбъектМД.ПланСчетов;
	
	// Получение дерева плана счетов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Код,
	|	Таблица.Наименование
	|ИЗ
	|	ПланСчетов." + ПланСчетов.Имя + " КАК Таблица
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Код
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	ДеревоПланаСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Добавление строк из дерева плана счетов.
	ДобавитьСтрокиПланаСчетов(СтрокаРодитель, ДеревоПланаСчетов.Строки, ПрефиксИмениСчета);
	
КонецПроцедуры // ДобавитьСтруктуруПланаСчетов()

// Процедура добавляет строки из дерева плана счетов.
//
Процедура ДобавитьСтрокиПланаСчетов(СтрокаРодитель, СтрокиДерева, ПрефиксИмениСчета)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Имя = ПрефиксИмениСчета + СтрокаДерева.Код;
		
		Если СтрокаРодитель.Имя = Имя Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Имя				= Имя;
		НоваяСтрока.Представление	= СтрокаДерева.Код + " """ + СтрокаДерева.Наименование + """";
		НоваяСтрока.ИндексКартинки	= 3;
		
		ДобавитьСтрокиПланаСчетов(НоваяСтрока, СтрокаДерева.Строки, ПрефиксИмениСчета);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиПланаСчетов()

// Функция определяет возможность выбора значения. Если возможность есть, возвращает Истина.
//
Функция ОпределитьВыбранноеЗначение()
	
	ТекущиеДанные = ЭлементыФормы.Регистры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("ПолеВвода") Тогда
		
		мКодВыбранногоСчета	= Неопределено;
		ДанныеИсточника		= ТекущиеДанные.Имя;
		
		// Если выбран конкретный счет плана счетов, то необходимо его передать форме-владельцу.
		Позиция = Найти(ДанныеИсточника, "|");
		
		Если Позиция > 0 Тогда
			
			мКодВыбранногоСчета	= Сред(ДанныеИсточника, Позиция + 1);
			ДанныеИсточника		= Лев(ДанныеИсточника, Позиция - 1);
			
		КонецЕсли;
		
		// Передача выбранных данных в вызвавших элемент.
		ВладелецФормы.Значение = ДанныеИсточника;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОпределитьВыбранноеЗначение()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// Формирование дерева регистров
	СформироватьДеревоРегистров();
	
	// Позиционирование на текущем регистре
	Если ТипЗнч(ВладелецФормы) = Тип("ПолеВвода") И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		
		Если Найти(ВладелецФормы.Значение, "РегистрБухгалтерии.") = 1 И мКодВыбранногоСчета <> Неопределено Тогда
			Имя = ВладелецФормы.Значение + "|" + мКодВыбранногоСчета;
		Иначе
			Имя = ВладелецФормы.Значение;
		КонецЕсли;
		
		НайденныеСтроки = Регистры.Строки.НайтиСтроки(Новый Структура("Имя", Имя), Истина);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.Регистры.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК ОСНОВНОЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура - обработчик нажатия кнопки "ОК" основной командной панели формы.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ОпределитьВыбранноеЗначение() Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура - обработчик нажатия кнопки "Отмена" основной командной панели формы.
//
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	Закрыть(Ложь);
	
КонецПроцедуры // ОсновныеДействияФормыОтмена()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Выбор" элемента формы "Регистры".
//
Процедура РегистрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ОпределитьВыбранноеЗначение() Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры // РегистрыВыбор()
