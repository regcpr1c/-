Перем ОписаниеИсточника Экспорт;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Если источником является регистр бухгалтерии и установлен отбор по счету
// плана счетов данного регистра, то возвращает этот счет.
// Иначе возвращает Неопределено.
//
Функция ПолучитьСчетПоОтбору()
	
	Перем ОбъектМД;
	Перем Счет;
	
	Если Найти(ИмяРегистра, "РегистрБухгалтерии.") = 1 И ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
		
		ЭлементОтбора = Построитель.Отбор.Найти("Счет");
	
		Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
			
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии
			 ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			 
				Счет = ЭлементОтбора.Значение;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции // ПолучитьСчетПоОтбору()

// Функция определяет объект метаданных по имени регистра. Если объект метаданных определен,
// возвращает Истина.
//
Функция ПолучитьОбъектМДРегистра(ОбъектМД)
	
	Если ОбъектМД <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРегистра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ИмяРегистра);
	
	Возврат (ОбъектМД <> Неопределено);
	
КонецФункции // ПолучитьОбъектМДРегистра()

// Функция возвращает список допустимых значений для выбора показателя.
//
Функция ПолучитьЗначенияДляВыбораПоказателя(ОбъектМД)
	
	СписокВыбора = Новый СписокЗначений;
	
	Класс = Лев(ИмяРегистра, Найти(ИмяРегистра, ".") - 1);
	
	Если ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
		
		Для Каждого Ресурс Из ОбъектМД.Ресурсы Цикл
			
			Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
				
				СписокВыбора.Добавить(Ресурс.Имя + "Оборот", Ресурс.Имя + "Оборот", , );
				
				Если Класс = "РегистрБухгалтерии" Тогда
					
					СписокВыбора.Добавить(Ресурс.Имя + "ОборотДт", Ресурс.Имя + "ОборотДт", , );
					СписокВыбора.Добавить(Ресурс.Имя + "ОборотКт", Ресурс.Имя + "ОборотКт", , );
			
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьЗначенияДляВыбораПоказателя()

// Функция возвращает список допустимых значений для выбора аналитики
// указанного вида.
//
Функция ПолучитьЗначенияДляВыбораАналитики(ОбъектМД, ВидАналитики, ИспользоватьПоля, ИспользоватьЗначения, Счет)
	
	СписокВыбора = Новый СписокЗначений;
	
	// Формирование списка измерений.
	МассивТипов = ПолучитьМассивДопустимыхТиповПоВидуАналитики(ВидАналитики);
	
	Если ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
		
		Для Каждого Измерение Из ОбъектМД.Измерения Цикл
			
			Для Каждого ДопустимыйТип Из МассивТипов Цикл
				
				Если Измерение.Тип.СодержитТип(ДопустимыйТип) Тогда
					СписокВыбора.Добавить(Измерение.Имя, Измерение.Имя, , );
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Добавление допустимых субконто счета
		Если Счет <> Неопределено Тогда
			
			НомерСубконто = 1;
			
			Для Каждого Субконто Из Счет.ВидыСубконто Цикл
				
				Для Каждого ДопустимыйТип Из МассивТипов Цикл
				
					Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ДопустимыйТип) Тогда
						СписокВыбора.Добавить("Субконто" + НомерСубконто, "Субконто" + НомерСубконто, , );
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСубконто = НомерСубконто + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавление команды выбора поля
	Если ИспользоватьПоля Тогда
		
		СписокВыбора.Добавить("Команда_ВыбратьПоле", "Поле...", , );
		
	КонецЕсли;
	
	// Добавление команды выбора значения
	Если ИспользоватьЗначения Тогда
		
		Для Каждого ДопустимыйТип Из МассивТипов Цикл
			
			ОбъектМД = Метаданные.НайтиПоТипу(ДопустимыйТип);
			
			Если ОбъектМД <> Неопределено Тогда
			
				СписокВыбора.Добавить("Команда_" + ОбъектМД.Имя, ОбъектМД.Синоним + "...", , );
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьЗначенияДляВыбораАналитики()

// Процедура формирует текст запроса для получения данных регистра.
//
Процедура СформироватьТекстЗапроса(ОбъектМД)
	
	КлассРегистра = Лев(ИмяРегистра, Найти(ИмяРегистра, ".") - 1);
	
	Текст =
	"ВЫБРАТЬ
	|
	|	// Измерения регистра";
	
	Для Каждого Измерение Из ОбъектМД.Измерения Цикл
		
		Текст = Текст + "
		|	Таблица." + Измерение.Имя + ",";
		
	КонецЦикла;
	
	Если ДетализироватьПоРегистратору Тогда
		
		Текст = Текст + "
		|	Таблица.Период,
		|	Таблица.Регистратор,";
		
	КонецЕсли;
	
	Текст = Текст + "
	|
	|	// Ресурсы регистра";
	
	Для Каждого Ресурс Из ОбъектМД.Ресурсы Цикл
		
		Если Не Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВиртуальнаяТаблица = "ОстаткиИОбороты" Тогда
			
			Текст = Текст + "
			|	Таблица." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	Таблица." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток,";
			
		КонецЕсли;
		
		Текст = Текст + "
		|	Таблица." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот,";
		
		Если КлассРегистра = "РегистрБухгалтерии" Тогда
			
			Если ВиртуальнаяТаблица = "ОстаткиИОбороты" Тогда
			
				Текст = Текст + "
				|	Таблица." + Ресурс.Имя + "НачальныйОстатокДт КАК " + Ресурс.Имя + "НачальныйОстатокДт,
				|	Таблица." + Ресурс.Имя + "НачальныйОстатокКт КАК " + Ресурс.Имя + "НачальныйОстатокКт,
				|	Таблица." + Ресурс.Имя + "КонечныйОстатокДт КАК " + Ресурс.Имя + "КонечныйОстатокДт,
				|	Таблица." + Ресурс.Имя + "КонечныйОстатокКт КАК " + Ресурс.Имя + "КонечныйОстатокКт,";
				
			КонецЕсли;
			
			Текст = Текст + "
			|	Таблица." + Ресурс.Имя + "ОборотДт КАК " + Ресурс.Имя + "ОборотДт,
			|	Таблица." + Ресурс.Имя + "ОборотКт КАК " + Ресурс.Имя + "ОборотКт,";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(Текст, 1) = "," Тогда
		Текст = Лев(Текст, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	Если ВиртуальнаяТаблица = "ОстаткиИОбороты" Тогда
		ИмяТаблицы				= "ОстаткиИОбороты";
		ДополнительныеПараметры	= ", ";
	Иначе
		ИмяТаблицы				= "Обороты";
		ДополнительныеПараметры	= "";
	КонецЕсли;
	
	Текст = Текст + "
	|
	|ИЗ
	|	" + ОбъектМД.ПолноеИмя() + "." + ИмяТаблицы + "(&НачалоПериода, &КонецПериода, [ПЕРИОДИЧНОСТЬ], " + ДополнительныеПараметры + ") КАК Таблица";
	
	ТекстЗапроса = Текст;
	
КонецПроцедуры // СформироватьТекстЗапроса()

// Процедура инициализирует построитель отчета.
//
Процедура ИнициализироватьПостроительОтчета()
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		Построитель.Текст = СтрЗаменить(ТекстЗапроса, "[ПЕРИОДИЧНОСТЬ]", ?(ДетализироватьПоРегистратору, "РЕГИСТРАТОР", "МЕСЯЦ"));
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Построитель.ЗаполнитьНастройки();
	
КонецПроцедуры // ИнициализироватьПостроительОтчета()

// Процедура заполняет настройки источника данных по выбранному регистру.
//
Процедура ЗаполнитьНастройкиПоСтруктуреРегистра(КодВыбранногоСчета = Неопределено)
	
	Перем ОбъектМД;
	
	Если ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
		
		// Формирование текста запроса по регистру.
		СформироватьТекстЗапроса(ОбъектМД);
		
		// Инициализация построителя отчета.
		ИнициализироватьПостроительОтчета();
		
		// Заполнение наименования источника данных.
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ОбъектМД.Синоним;
		КонецЕсли;
		
		// Заполнение отбора по счету.
		Если КодВыбранногоСчета <> Неопределено Тогда
			
			Счет = ПланыСчетов[ОбъектМД.Имя].НайтиПоКоду(КодВыбранногоСчета);
			
			Если ЗначениеЗаполнено(Счет) Тогда
				
				ЭлементОтбора = Построитель.Отбор.Добавить("Счет");
				ЭлементОтбора.ВидСравнения	= ВидСравнения.ВИерархии;
				ЭлементОтбора.Значение		= Счет;
				ЭлементОтбора.Использование	= Истина;
				
			КонецЕсли;
			
		Иначе
			
			Счет = Неопределено;
			
		КонецЕсли;
		
		// Заполнение списка показателей.
		СписокВыбора = ПолучитьЗначенияДляВыбораПоказателя(ОбъектМД);
		
		Для Каждого СтрокаПоказателя Из Показатели Цикл
			
			ИмяВида = ВРег(СтрокаПоказателя.ВидПоказателя);
			
			ВероятноеЗначение = "";
			
			Для Каждого ЗначениеСписка Из СписокВыбора Цикл
				
				Если Найти(ВРег(ЗначениеСписка.Значение), ИмяВида) > 0 Тогда
					ВероятноеЗначение = ЗначениеСписка.Значение;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаПоказателя.ИмяРесурса = ВероятноеЗначение;
			
		КонецЦикла;
		
		// Заполнение списка аналитики
		Для Каждого СтрокаАналитики Из Аналитика Цикл
			
			СписокВыбора = ПолучитьЗначенияДляВыбораАналитики(ОбъектМД, СтрокаАналитики.ВидАналитики, Ложь, Ложь, Счет);
			
			Если СписокВыбора.Количество() > 0 Тогда
				
				СтрокаАналитики.ИмяИзмеренияЗначение = СписокВыбора[0].Значение;
				
			Иначе
				
				СтрокаАналитики.ИмяИзмеренияЗначение = "";
				
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса = "";
		
		// Заполнение списка показателей.
		Для Каждого СтрокаПоказателя Из Показатели Цикл
			СтрокаПоказателя.ИмяРесурса = "";
		КонецЦикла;
		
		// Заполнение списка измерений.
		Для Каждого СтрокаАналитики Из Аналитика Цикл
			СтрокаАналитики.ИмяИзмеренияЗначение = "";
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка ограничения на выбор виртуальной таблицы.
	УстановитьОграниченияВыбораВиртуальнойТаблицы(ОбъектМД);
	
КонецПроцедуры // ЗаполнитьНастройкиПоСтруктуреРегистра()

// Процедура осуществляет выбор значения из списка выбора для указанного элемента.
//
Процедура ВыбратьЗначениеИзСписка(СписокВыбора, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Лев(ВыбранноеЗначение.Значение, 8) = "Команда_" Тогда
			
			Команда = Сред(ВыбранноеЗначение.Значение, 9);
			
			Если Команда = "ВыбратьПоле" Тогда
				
				Форма = ПолучитьФорму("ФормаВыбораПоля", Элемент);
				Форма.Построитель.Текст	= Построитель.Текст;
				Форма.ДопустимыеТипы	= Новый ОписаниеТипов(ПолучитьМассивДопустимыхТиповПоВидуАналитики(ЭлементыФормы.Аналитика.ТекущиеДанные.ВидАналитики));
				Форма.ОткрытьМодально();
				
			Иначе
				
				Справочники[Команда].ПолучитьФормуВыбора(, Элемент).Открыть();
				
			КонецЕсли;
			
		Иначе
		
			Элемент.Значение = ВыбранноеЗначение.Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыбратьЗначениеИзСписка()

// Процедура устаналивает ограничения на выбор виртуальной таблицы в зависимости от выбранного регистра.
Процедура УстановитьОграниченияВыбораВиртуальнойТаблицы(ОбъектМД = Неопределено)
	
	Если ОбъектМД = Неопределено Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ИмяРегистра);
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Не ОбъектМД = Неопределено Тогда
		
		КлассРегистра = Лев(ИмяРегистра, Найти(ИмяРегистра, ".") - 1);
		
		Если КлассРегистра = "РегистрБухгалтерии" Тогда
			СписокВыбора.Добавить("Обороты");
			СписокВыбора.Добавить("ОстаткиИОбороты");
		ИначеЕсли КлассРегистра = "РегистрНакопления" Тогда
			Если ОбъектМД.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				СписокВыбора.Добавить("Обороты");
				СписокВыбора.Добавить("ОстаткиИОбороты");
			Иначе
				СписокВыбора.Добавить("Обороты");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.ВиртуальнаяТаблица.СписокВыбора = СписокВыбора;
	
КонецПроцедуры // УстановитьОграниченияВыбораВиртуальнойТаблицы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ЗаполнитьФормуНаОснованииОписанияИсточника()
	Если ОписаниеИсточника=Неопределено Тогда 
		Идентификатор=Строка(Новый УникальныйИдентификатор);
		Коэффициент=1;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма,ОписаниеИсточника,,"Показатели,Аналитика,ГраницыОтбора");
	Показатели=ОписаниеИсточника.Показатели.Скопировать();
	Аналитика=ОписаниеИсточника.Аналитика.Скопировать();
	ГраницыОтбора=ОписаниеИсточника.ГраницыОтбора.Скопировать();
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ЗаполнитьФормуНаОснованииОписанияИсточника();
	
	УстановитьОграниченияВыбораВиртуальнойТаблицы();
	
	
	
	// Добавление отсутствующих в списке границ отбора.
	Для Каждого Значение Из ГраницыПериода Цикл
		
		Если ГраницыОтбора.Найти(Значение, "ВидГраницы") = Неопределено Тогда
			ГраницыОтбора.Добавить().ВидГраницы = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление отсутствующих в списке показателей.
	Для Каждого Значение Из ПоказателиПланирования Цикл
		
		Если Показатели.Найти(Значение, "ВидПоказателя") = Неопределено Тогда
			Показатели.Добавить().ВидПоказателя = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление отсутствующей в списке аналитики.
	Для Каждого Значение Из АналитикаПланирования Цикл
		
		Если Аналитика.Найти(Значение, "ВидАналитики") = Неопределено Тогда
			Аналитика.Добавить().ВидАналитики = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	// Инициализация построителя отчета.
	ИнициализироватьПостроительОтчета();
	
	Если ОписаниеИсточника<>Неопределено Тогда
		Настройки = НастройкиПостроителя.Получить();
		
		Если Настройки <> Неопределено Тогда
			
			Попытка
				Построитель.УстановитьНастройки(Настройки);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	// Проверка заполнения данных источника.
	НачалоСообщения = "При заполнении источника для получения данных допущены ошибки:";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Наименование""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРегистра) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Данные""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВиртуальнаяТаблица) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Таблица""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение настроек построителя.
	НастройкиПостроителя = Новый ХранилищеЗначения(Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "НачалоВыбора" элемента формы "ИмяРегистра".
//
Процедура ИмяРегистраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Выбор имени регистра.
	Форма = ПолучитьФорму("ФормаВыбораРегистра", Элемент);
	
	Счет = ПолучитьСчетПоОтбору();
	
	Если Счет <> Неопределено Тогда
		Форма.мКодВыбранногоСчета = Строка(Счет);
	КонецЕсли;
	
	Если Форма.ОткрытьМодально() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение настроек источника по структуре регистра.
	ЗаполнитьНастройкиПоСтруктуреРегистра(Форма.мКодВыбранногоСчета);
	
	Если Не ЗначениеЗаполнено(ВиртуальнаяТаблица) И ЭлементыФормы.ВиртуальнаяТаблица.СписокВыбора.Количество() > 0 Тогда
		ВиртуальнаяТаблица = ЭлементыФормы.ВиртуальнаяТаблица.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры // ИмяРегистраНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы "ВиртуальнаяТаблица".
//
Процедура ВиртуальнаяТаблицаПриИзменении(Элемент)
	
	Перем ОбъектМД;
	
	Если ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
	
		// Формирование текста запроса по регистру.
		СформироватьТекстЗапроса(ОбъектМД);
		
		// Инициализация построителя отчета.
		ИнициализироватьПостроительОтчета();
		
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли;
		
КонецПроцедуры // ВиртуальнаяТаблицаПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента формы "ДетализироватьПоРегистратору".
//
Процедура ДетализироватьПоРегистраторуПриИзменении(Элемент)
	
	Перем ОбъектМД;
	
	Если ПолучитьОбъектМДРегистра(ОбъектМД) Тогда
	
		// Формирование текста запроса по регистру.
		СформироватьТекстЗапроса(ОбъектМД);
		
		// Инициализация построителя отчета.
		ИнициализироватьПостроительОтчета();
		
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли;
	
КонецПроцедуры // ДетализироватьПоРегистраторуПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ИмяРесурса" табличного поля "Показатели".
//
Процедура ПоказателиИмяРесурсаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЗначениеИзСписка(ПолучитьЗначенияДляВыбораПоказателя(Неопределено), Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПоказателиИмяРесурсаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" колонки "ИмяИзмеренияЗначение" табличного поля "Аналитика".
//
Процедура АналитикаИмяИзмеренияЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЗначениеИзСписка(ПолучитьЗначенияДляВыбораАналитики(Неопределено, ЭлементыФормы.Аналитика.ТекущиеДанные.ВидАналитики, Истина, Истина, ПолучитьСчетПоОтбору()), Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // АналитикаИмяИзмеренияНачалоВыбора()

// Процедура - обработчик события "Очистка" колонки "Смещение" табличного поля "ГраницыОтбора".
//
Процедура ГраницыОтбораСмещениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ГраницыОтбора.ТекущиеДанные;
	ТекущиеДанные.ПериодСмещения = "";//Перечисления.bpПериодичностьПланирования.ПустаяСсылка();
	
КонецПроцедуры // ГраницыОтбораСмещениеОчистка()

// Процедура - обработчик события "ПриПолученииДанных" элемента формы "Показатели".
//
Процедура ПоказателиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если НЕ ПустаяСтрока(ОформлениеСтроки.ДанныеСтроки.ИмяРесурса) Тогда
			ОформлениеСтроки.Ячейки.ИмяРесурса.ИндексКартинки = 1;
			ОформлениеСтроки.Ячейки.ИмяРесурса.ОтображатьКартинку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПоказателиПриПолученииДанных()

// Процедура - обработчик события "ПриПолученииДанных" элемента формы "Аналитика".
//
Процедура АналитикаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Значение = ОформлениеСтроки.ДанныеСтроки.ИмяИзмеренияЗначение;
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Если Найти(Значение, ".") = 0 Тогда
					ИндексКартинки = 2;
				Иначе
					ИндексКартинки = 4;
				КонецЕсли;
			Иначе
				ИндексКартинки = 3;
			КонецЕсли;
			
			ОформлениеСтроки.Ячейки.ИмяИзмеренияЗначение.ИндексКартинки = ИндексКартинки;
			ОформлениеСтроки.Ячейки.ИмяИзмеренияЗначение.ОтображатьКартинку = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // АналитикаПриПолученииДанных()


Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)
	Отказ=Ложь;
	
	// Проверка заполнения данных источника.
	НачалоСообщения = "При заполнении источника для получения данных допущены ошибки:";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Наименование""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРегистра) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Данные""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВиртуальнаяТаблица) Тогда
		
		Если НачалоСообщения <> "" Тогда
			ОчиститьСообщения();
			Сообщить(НачалоСообщения, СтатусСообщения.Внимание);
			НачалоСообщения = "";
		КонецЕсли;
		
		Сообщить("- Не заполнено значение реквизита ""Таблица""", СтатусСообщения.Обычное);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИсточникаДанных=Новый Структура;
	СтруктураИсточникаДанных.Вставить("Идентификатор",Идентификатор);
	СтруктураИсточникаДанных.Вставить("Наименование",Наименование);
	СтруктураИсточникаДанных.Вставить("ИмяРегистра",ИмяРегистра);
	СтруктураИсточникаДанных.Вставить("НастройкиПостроителя",Новый ХранилищеЗначения(Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь)));
	СтруктураИсточникаДанных.Вставить("ТекстЗапроса",ТекстЗапроса);
	СтруктураИсточникаДанных.Вставить("ВиртуальнаяТаблица",ВиртуальнаяТаблица);
	СтруктураИсточникаДанных.Вставить("ДетализироватьПоРегистратору",ДетализироватьПоРегистратору);
	СтруктураИсточникаДанных.Вставить("Коэффициент",Коэффициент);
	//СтруктураИсточникаДанных.Вставить("ВидИсточникаДанных",ВидИсточникаДанных);
	//СтруктураИсточникаДанных.Вставить("ПараметрыЗапросаИсточникаДанных",СтрокаИсточника.ПараметрыЗапросаИсточникаДанных);
	СтруктураИсточникаДанных.Вставить("Показатели",Показатели.Скопировать());
	СтруктураИсточникаДанных.Вставить("Аналитика",Аналитика.Скопировать());
	СтруктураИсточникаДанных.Вставить("ГраницыОтбора",ГраницыОтбора.Скопировать());
	
	Закрыть(СтруктураИсточникаДанных);
КонецПроцедуры


